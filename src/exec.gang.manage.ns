/*
 * Executable: exec.gang.manage.ns
 *
 * From: https://github.com/Penndrageist/bitburner-scripts/blob/master/scripts/gangManager.js.js
 */

function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}

// 30 possible gang members
// create list of names
let memberNamePool = [
    "Thor",           // 1
    "Iron Man",       // 2
    "Starlord",       // 3
    "Thanos",         // 4
    "Groot",          // 5
    "Ant-Man",        // 6
    "Wasp",           // 7
    "Spiderman",      // 8
    "Loki",           // 9
    "Gamora",         // 10
    "Rocket Raccoon", // 11
    "T'Challa",       // 12
    "Vision",         // 13
    "Scarlet Witch",  // 14
    "Winter Soldier", // 15
    "Black Widow",    // 16
    "Hulk",           // 17
    "Bruce Banner",   // 18
    "Hawkeye",        // 19
    "Captain Marvel", // 20
    "War Machine",    // 21
    "Nick Fury",      // 22
    "Nebula",         // 23
    "Drax",           // 24
    "Deadpool",       // 25
    "Cable",          // 26
    "Quicksilver",    // 27
    "Wolverine",      // 28
    "Adam Warlock",   // 29
    "Yondu",          // 30
];

// TODO: Replace these with FLAG_* to make it clearer in the code
const FLAG_ASCEND = 'ascend';
const FLAGS = [
    ['focused', false],
    ['buyAll', false],
    ['buyEquip', false],
    ['buyWeapon', false],
    ['buyArmor', false],
    ['buyVehicle', false],
    ['buyRoot', false],
    ['buyAug', false],
    ['buyBat', true],
    [FLAG_ASCEND, true],
    ['c', 0.6], // Minimum acceptable combat win level
    ['asc', 600000] // Ascension cycles
];

const ASCEND_CYCLES = 1000; // The number of times to ascend a gang member each time we ascend
const ASCENSION_MULTIPLIER_LIMIT = 25; // ascension multiplier limit (beyond which we won't ascend)

const STATS_TRAIN_TARGET = 50; // Below this, train

const TASK_UNASSIGNED = 'Unassigned';
const TASK_MUG = 'Mug People';
const TASK_DEAL_DRUGS = 'Deal Drugs';
const TASK_STRONGARM = 'Strongarm Civilians';
const TASK_RUN_CON = 'Run a Con';
const TASK_ARMED_ROBBERY = 'Armed Robbery';
const TASK_TRAFFICK_ARMS = 'Traffick Illegal Arms';
const TASK_BLACKMAIL = 'Threaten & Blackmail';
const TASK_TRAFFICK_HUMANS = 'Human Trafficking';
const TASK_TERRORISM = 'Terrorism';
const TASK_VIGILANTE = 'Vigilante Justice';
const TASK_TRAIN_COMBAT = 'Train Combat';
const TASK_TRAIN_HACKING = 'Train Hacking';
const TASK_TRAIN_CHARISMA = 'Train Charisma';
const TASK_TERRITORY_WARFARE = 'Territory Warfare';
const TASK_RANSOMWARE = "Ransomware";
const TASK_PHISHING = "Phishing";
const TASK_IDENTITY_THEFT = "Identity Theft";
const TASK_DDOS = "DDoS Attacks";
const TASK_VIRUS = "Plant Virus";
const TASK_FRAUD = "Fraud & Counterfeiting";
const TASK_MONEY_LAUNDER = "Money Laundering";
const TASK_CYBERTERRORISM = "Cyberterrorism";
const TASK_ETHICAL_HACKING = "Ethical Hacking";

const TASKS_COMBAT = [
    TASK_MUG, TASK_DEAL_DRUGS, TASK_STRONGARM, TASK_RUN_CON, TASK_ARMED_ROBBERY,
    TASK_TRAFFICK_ARMS, TASK_BLACKMAIL, TASK_TRAFFICK_HUMANS, TASK_TERRORISM,
    TASK_VIGILANTE
];
const TASKS_HACKING = [
    TASK_RANSOMWARE, TASK_PHISHING, TASK_IDENTITY_THEFT, TASK_DDOS, TASK_VIRUS,
    TASK_FRAUD, TASK_MONEY_LAUNDER, TASK_CYBERTERRORISM,
    TASK_ETHICAL_HACKING
];
const ALL_TASKS = [
    TASK_UNASSIGNED,
    ...TASKS_COMBAT,
    ...TASKS_HACKING,
    TASK_TRAIN_COMBAT, TASK_TRAIN_HACKING, TASK_TRAIN_CHARISMA,
    TASK_TERRITORY_WARFARE
];
const TERRITORY_TASKED_PERCENT = 25;

/*
 * Determines the current max multiplier that should be targeted
 * Starts at 10x
 * When 5 members have that amount, moves up to 100x
 * Then repeat to 1000x
 * Doesn't go above that
 */
function determineAsecensionLimit(ns) {
    const members = ns.gang.getMemberNames();

    // Get the member with the lowest str asc xp multiplier, of the top 5
    const lowest = members
        .map(member => ns.gang.getMemberInformation(member))
        .sort((a, b) => b.str_asc_mult - a.str_asc_mult) // We only care about Strength because we're using the bat to ascend
        .splice(0, 5)
        .reduce((a, b) => a.str_asc_mult < b.str_asc_mult ? a : b);
    ns.print("Lowest of top 5 is: " + JSON.stringify(lowest));
    if (lowest.str_asc_mult < 10) {
        return 10;
    } else if (lowest.str_asc_mult < 100) {
        return 100;
    } else {
        return 1000;
    }
}

/*
 * Returns the best member to ascend at this time
 *
 * We try to max 5 members
 * Find the 5 members with the highest str asc multiplier
 * Find the member with the lowest respect, of those 5
 * If that member is above the str asc multiplier cap, there's nothing to ascend
 * Otherwise, ascend that character
 *
 */
function determineBestMemberToAscend(ns) {
    const members = ns.gang.getMemberNames();
    if (members.length < 15) {
        // don't bother to ascend until getting 15 members
        return null;
    }

    const multiplierLimit = determineAsecensionLimit(ns);

    const topFiveByMult = members
        .map(member => ns.gang.getMemberInformation(member))
        .sort((a, b) => b.str_asc_mult - a.str_asc_mult)
        .splice(0, 5);
    const lowestByRespect = topFiveByMult
        .sort((a, b) => a.earnedRespect - b.earnedRespect)
        [0];
    if (lowestByRespect.str_asc_mult > multiplierLimit) {
        //ns.print("Member [" + lowestByRespect.name + "] is above limit, not ascending anyone");
        return null;
    }

    //console.log("Best", lowestByRespect);
    return lowestByRespect.name;
}

async function ascendMember(ns, memberName) {
    const limit = determineAsecensionLimit(ns);
    let i;
    for (i = 0; i < ASCEND_CYCLES; i++) {
        const memberInfo = ns.gang.getMemberInformation(memberName);
        if (memberInfo.str_asc_mult >= limit) {
            ns.print("Member [" + memberName + "] has surpassed multiplier limits (after " + i + " ascensions)")
            return;
        }
        if (!memberInfo.upgrades.includes('Baseball Bat')) {
            ns.gang.purchaseEquipment(memberName, 'Baseball Bat');
        }
        ns.gang.ascendMember(memberName);
        if (i % 100 === 0) {
            ns.sleep(1);
        }
    }

    ns.print("Ascended [" + memberName + "] " + i + " times");
}

function buyEquipment(ns, member, buyableEquipment) {
    // TODO: figure this out later... we don't want to buy equipment unless the char is already maxed out
    return;
    let didBuy = false;

    const memInfo = ns.gang.getMemberInformation(member);

    //ns.gang.setMemberTask(m, TASK_UNASSIGNED);

    buyableEquipment.forEach((equipment) => {
        if (memInfo.upgrades.includes(equipment)) {
            return;
        }
        if (memInfo.augmentations.includes(equipment)) {
            return;
        }

        var type = ns.gang.getEquipmentType(equipment);
        switch (type) {
            case "Weapon":
                if (buyWeapon) {
                    didBuy |= ns.gang.purchaseEquipment(member, equipment);
                }
                break;
            case "Armor":
                if (buyArmor) {
                    didBuy |= ns.gang.purchaseEquipment(member, equipment);
                }
                break;
            case "Vehicle":
                if (buyVehicle) {
                    didBuy |= ns.gang.purchaseEquipment(member, equipment);
                }
                break;
            case "Rootkit":
                if (buyRoot) {
                    didBuy |= ns.gang.purchaseEquipment(member, equipment);
                }
                break;
            case "Augmentation":
                if (buyAug) {
                    didBuy |= ns.gang.purchaseEquipment(member, equipment);
                }
                break;
            default:
                break;
        }
    });

    return didBuy;
}

function canTerrorism(memberInfo) {
    const abilities = memberInfo.hack + memberInfo.str + memberInfo.def + memberInfo.dex + memberInfo.cha;
    return abilities > 630;
}

function canTrafficArms(memberInfo) {
    const abilities = memberInfo.hack + memberInfo.str + memberInfo.def + memberInfo.dex + memberInfo.cha;
    return abilities > 800;
}

function canTaskStrongArm(memberInfo) {
    const abilities = memberInfo.str;
    return abilities > 120;
}

function canMug(memberInfo) {
    const abilities = memberInfo.str;
    return abilities > 30;
}


export async function main(ns) {
    ns.disableLog('ALL');

    var flagValues = ns.flags(FLAGS);

    var balanceTasks = !flagValues['focused'];
    var minCombatWinLevel = Math.min(flagValues['c'], 1.0);

    var buyAll = flagValues['buyAll'];

    var buyEquip = buyAll || flagValues["buyEquip"];

    var buyWeapon = buyAll || buyEquip || flagValues["buyWeapon"];
    var buyArmor = buyAll || buyEquip || flagValues["buyArmor"];
    var buyVehicle = buyAll || buyEquip || flagValues["buyVehicle"];
    var buyRoot = buyAll || buyEquip || flagValues["buyRoot"];

    var buyAug = buyAll || flagValues["buyAug"];

    const shouldAscendMembers = flagValues[FLAG_ASCEND];

    var myGang = ns.gang.getGangInformation();

    if (myGang.isHacking) {
        ns.tprint("Error: Script does not support hacking gangs");
        ns.exit();
    }

    // Confirm that all the tasks we think we know... exist
    var possibleTasks = ns.gang.getTaskNames();
    ns.print(`All Tasks: ${possibleTasks}`);
    const invalidTasks = ALL_TASKS
        .filter(task => !(myGang.isHacking ? TASKS_COMBAT : TASKS_HACKING).includes(task))
        .filter(task => !possibleTasks.includes(task));
    if (invalidTasks.length > 0) {
        ns.tprint("The following tasks were not recognized: " + invalidTasks.join(", "));
        return;
    }

    var territoryTask = TASK_TERRITORY_WARFARE;
    let trainingTasks = [ TASK_TRAIN_COMBAT, TASK_TRAIN_HACKING, TASK_TRAIN_CHARISMA ];
    var wantedLevelLowerTask = TASK_VIGILANTE;


    wantedLevelLowerTask = TASK_VIGILANTE;

    trainingTasks = [ TASK_TRAIN_COMBAT, TASK_TRAIN_CHARISMA ];

    var desirableAugs = [];
    desirableAugs.push("Bionic Arms");
    desirableAugs.push("Bionic Legs");
    desirableAugs.push("Bionic Spine");
    desirableAugs.push("BrachiBlades");
    desirableAugs.push("Nanofiber Weave");
    desirableAugs.push("Synthetic Heart");
    desirableAugs.push("Synfibril Muscle");
    desirableAugs.push("Graphene Bone Lacings");



    var ascensionCycles = flagValues["asc"];
    var nextAscensionAttempt = 0;
    var cycleMs = 2100;
    //var ascensionMultLimit = flagValues["alim"];

    ns.print(`unassignedTask: ${TASK_UNASSIGNED}`);
    ns.print(`territoryTask: ${territoryTask}`);
    ns.print(`trainingTasks: ${trainingTasks}`);
    ns.print(`possibleTasks: ${possibleTasks}`);
    ns.print(`wantedLevelLowerTask: ${wantedLevelLowerTask}`);

    await ns.sleep(1000);

    var otherGangs = ns.gang.getOtherGangInformation();
    var otherGangNames = [];
    for(var gangName in otherGangs) {
        otherGangNames.push(gangName);
        //ns.tprint(gangName);
    }

    // -- Setup Complete --

    ns.print("Multiplier: " + determineAsecensionLimit(ns));
    ns.print("Best member: " + determineBestMemberToAscend(ns));


    while (true) {
        myGang = ns.gang.getGangInformation();
        var otherGangs = ns.gang.getOtherGangInformation();
        var buyableEquipment = ns.gang.getEquipmentNames().filter(e => {
            return ns.gang.getEquipmentType(e) != "Augmentation" || desirableAugs.includes(e);
        });

        // -- Setup gang warfare --

        if(myGang.isHacking) {
            ns.gang.setTerritoryWarfare(false);
        } else {
            ns.gang.setTerritoryWarfare(otherGangNames.every(name => ns.gang.getChanceToWinClash(name) > minCombatWinLevel));
        }

        var members = ns.gang.getMemberNames();

        // -- Recruit new members if we can --

        while(ns.gang.canRecruitMember()) {
            var possibleNames = memberNamePool.filter(name => !members.includes(name));
            var toRecruit = possibleNames[getRandomInt(possibleNames.length)];

            ns.gang.recruitMember(toRecruit);
            await ns.sleep(1);
        }

        // -- Handle ascensions --

        if (shouldAscendMembers) {
            const batCost = ns.gang.getEquipmentCost('Baseball Bat');
            if (!batCost) {
                ns.tprint("Unable to determine cost of bat");
                ns.exit();
            }
            if (ns.getServerMoneyAvailable("home") > ((batCost * ASCEND_CYCLES) * 2)) {
                const memberToAscend = determineBestMemberToAscend(ns);
                if (memberToAscend != null) {
                    ns.print("Found best member to ascend: " + memberToAscend);
                    await ascendMember(ns, memberToAscend);
                }
            }
        }

        // -- Buy Gear --

        members = ns.gang.getMemberNames();
        members.sort((a,b)=> { return Math.random()*2-1; } );
        members.forEach(member => buyEquipment(ns, member, buyableEquipment));

        // -- Assign Tasks --

        const shouldAssignTasks = false;
        if (shouldAssignTasks) {
            /*
             * Assign all members below the level of min-stats, then train
             * If there are no members training (because of that ^), set one member to training (the one with the lowest stats)
             * For each member
             * - If wanted > 1 and wantedLevelGainRate > 0, then assign member to reduce wanted level
             * - If territory warfare members < TERRITORY_TASKED_PERCENT, assign to warfare
             * - If member can terrorism and traffic arms, pick whichever we have less of
             * - If member can terrorism OR traffic arms, do the one it can
             * - If member can strongarm, do that
             * - If member can mug, do that
             * - Otherwise, train
             * Lastly, if territory warfare change is < required, turn if off and reassign members from warfare to training
             *
             * NOTE: We're skipping territorial warfare atm because we can do that manually
             *
             * TODO: This needs more work because it winds up leaving wanted level increasing
             *       Would it work to add vigilantees as we add workers?
             */

            const memberNames = ns.gang.getMemberNames();
            // Reset all members to doing nothing
            memberNames.forEach(member => ns.gang.setMemberTask(member, TASK_UNASSIGNED));

            // For each member below <training level> strength, set them to training
            let anyTraining = false;
            memberNames
                .map(member => ns.gang.getMemberInformation(member))
                .filter(memberInfo => memberInfo.task === TASK_UNASSIGNED)
                .forEach(memberInfo => {
                    if (memberInfo.strength < STATS_TRAIN_TARGET) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_TRAIN_COMBAT);
                        anyTraining = true;
                    }
                });

            // If there are no members training, set the one with the lowest str to train
            // Make sure it's not one of the top 5
            if (!anyTraining) {
                const memberToTrain = memberNames
                    .map(member => ns.gang.getMemberInformation(member))
                    .sort((a, b) => b.str_asc_mult - a.str_asc_mult)
                    .splice(5, memberNames.length - 5)
                    .filter(memberInfo => memberInfo.task === TASK_UNASSIGNED)
                    .sort((a, b) => a.str_exp - b.str_exp)
                    [0];
                ns.gang.setMemberTask(memberToTrain.name, TASK_TRAIN_COMBAT);
            }

            // Assign as many as necessary to bring down wanted
            // We have to refetch it each time here, because the assigned jobs will change it
            // TODO: this still isn't working... it's flipflopping between everyone vigilante, and nobody
            if (myGang.wantedLevel > 1) {
                // Use everyone
                memberNames
                    .map(member => ns.gang.getMemberInformation(member))
                    .filter(memberInfo => memberInfo.task === TASK_UNASSIGNED)
                    .forEach(memberInfo => ns.gang.setMemberTask(memberInfo.name, TASK_VIGILANTE));
            } else if (ns.gang.getGangInformation().wantedLevelGainRate > 0) {
                // Use enough to bring gain rate below 0
                const available = memberNames
                    .map(member => ns.gang.getMemberInformation(member))
                    .filter(memberInfo => memberInfo.task === TASK_UNASSIGNED);
                while (ns.gang.getGangInformation().wantedLevelGainRate > 0 && available.length > 0) {
                    const currentMemberInfo = available.shift();
                    ns.gang.setMemberTask(currentMemberInfo.name, TASK_VIGILANTE);
                }
            }

            // Choose the right active task for everyone left
            // If member can terrorism and traffic arms, pick whichever we have less of
            // If member can terrorism OR traffic arms, do the one it can
            // If member can strongarm, do that
            // If member can mug, do that
            // Otherwise, train
            let taskCounts = {
                [TASK_TERRORISM]: 0,
                [TASK_TRAFFICK_ARMS]: 0
            };

            memberNames
                .map(member => ns.gang.getMemberInformation(member))
                .filter(memberInfo => memberInfo.task === TASK_UNASSIGNED)
                .forEach(memberInfo => {
                    if (ns.gang.getGangInformation().wantedLevelGainRate > 0) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_VIGILANTE);
                    } else if (canTerrorism(memberInfo) && canTrafficArms(memberInfo)) {
                        const task = taskCounts[TASK_TERRORISM] < taskCounts[TASK_TRAFFICK_ARMS]
                            ? TASK_TERRORISM : TASK_TRAFFICK_ARMS;
                        ns.gang.setMemberTask(memberInfo.name, task);
                        taskCounts[task] += 1;
                    } else if (canTerrorism(memberInfo)) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_TERRORISM);
                        taskCounts[TASK_TERRORISM] += 1;
                    } else if (canTrafficArms(memberInfo)) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_TRAFFICK_ARMS);
                        taskCounts[TASK_TRAFFICK_ARMS] += 1;
                    } else if (canTaskStrongArm(memberInfo)) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_STRONGARM);
                    } else if (canMug(memberInfo)) {
                        ns.gang.setMemberTask(memberInfo.name, TASK_MUG);
                    } else {
                        ns.gang.setMemberTask(memberInfo.name, TASK_TRAIN_COMBAT);
                    }
                });
        }

        await ns.sleep(cycleMs);
        nextAscensionAttempt -= cycleMs;
    }
}
