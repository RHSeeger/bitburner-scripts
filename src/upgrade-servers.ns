/*
 * Upgrades existing servers to a new (bigger) size
 *
 * Iterate over each purchased server that matches the naming pattern
 *   If the server is not at least the desired level AND there is enough money, upgrade it
 *   If not upgraded, kill off anything running on it
 *
 * If you do not have enough money to upgrade all servers to [size], will do the ones it can and
 *   loop until it can upgrade the rest of the servers.
 *
 * After each loop where it was able to upgrade at least one server, will signal hack-dist to reconfigure
 *
 * Creates servers with the name pattern: pserv-[size]-[index]
 *   Where:
 *       size = The ln(2) of the server's memory size in Gb (so pserv-10-1 has 1024 G of memory)
 *       index = the server number (from 0 to [max])
 * Recognizes servers with names it created, plus those with the format: pserv-[index]
 *   For servers without the size in the name, it will need to make a call to the server to get it's size
 *
 * This script uses a [server] structure that is different from that used by [lib.serves.ns]
 *
 * NOTE: STILL A WORK IN PROGRESS
 *
 * Usage: run upgrade-servers.ns [size]
 *     size = log2 the amount of memory desired (1 = 2, 10 = 1024, etc)
 */

import {signal} from 'lib.signal.ns';

const SERVER_NAME_PATTERN_WITH_SIZE = /^pserv-(\d+)-(\d+)$/;
const SERVER_NAME_PATTERN_NO_SIZE = /^pserv-(\d+)$/;

/*
 * Returns a list of purchased servers that match our naming patterns
 */
function getServersInfo(ns) {
    var serverNames = ns.getPurchasedServers(); // list of hostname strings

    return serverNames
        .map((hostname) => {
            if (SERVER_NAME_PATTERN_WITH_SIZE.test(hostname)) {
                const matches = hostname.match(SERVER_NAME_PATTERN_WITH_SIZE);
                return {
                    'name': hostname,
                    'size': matches[1],
                    'index': matches[2]
                }
            } else if (SERVER_NAME_PATTERN_NO_SIZE.test(hostname)) {
                const matches = hostname.match(SERVER_NAME_PATTERN_NO_SIZE);
                return {
                    'name': hostname,
                    'size': null,
                    'index': matches[1]
                }
            } else {
                // Dosn't match our patterns, ignore it
                return null;
            }
        })
        .filter((value) => value !== null);
}

function calculateIfNeedsUpgrade(ns, server, desiredSize) {
    const serverSize = getServerSize(ns, server);
    return (serverSize < desiredSize);
}

function getServerSize(ns, server) {
    if (!server.hasOwnProperty('size') || server.size === null) {
        const memory = ns.getServerRam(server.name); // [ total_memory, used_memory
        server.memory_total = memory[0];
        server.memory_used = memory[1];
        //ns.tprint("Server memory: " + memory);
        const size = Math.floor(Math.log2(memory[0]));
        //ns.tprint("Server size: " + size);
        server.size = size;
    }
    return server.size;
}

/*
 * Upgrades the list of servers
 * Returns a list of servers that could not be upgraded (and should be tried again, if blocking)
 */
function upgradeServers(ns, servers, desiredSize, userMoney, serverPurchaseCost) {
    let unUpgradedServers = [];

    for (var i = 0; i < servers.length; i++) {
        var server = servers[i];

        if (shouldUpgrade(ns, server, desiredSize)) {
            if (canUpgrade(userMoney, serverPurchaseCost)) {
                if (upgrade(ns, server, desiredSize)) {
                    // upgrade will have changes [server]'s field values to the new instance
                    userMoney -= serverPurchaseCost;
                } else {
                    ns.print("Server [" + server.name + "]: Failed to upgrade");
                    // failed... and the delete can't fail... so we deleted it, but couldn't recreate it
                    // Can we recover from this somehow? Try to create it (without having to delete it) in the next loop?
                    // EVERYTHING will need to understand that it's possible a server was deleted
                    unUpgradedServers.push(server);
                }
            } else {
                ns.print("Server [" + server.name + "]: Unable to upgrade");
                unUpgradedServers.push(server);
            }
        } else {
            ns.print("Server [" + server.name + "]: Does not need to be upgraded");
        }
    };

    return unUpgradedServers;
}

function getServerRam(ns, server) {
    return Math.pow(2, getServerSize(ns, server));
}


function shouldUpgrade(ns, server, desiredSize) {
    return (getServerSize(ns, server) < desiredSize);
}

function canUpgrade(userMoney, serverPurchaseCost) {
    return (userMoney > serverPurchaseCost);
}

function isDeleted(server) {
    return server.hasOwnProperty('deleted') && server['deleted'] === true;
}

/*
 * Upgrades the server to the desired size
 * Returns true if successful (or the server was already the desired size), false otherwise
 */
function upgrade(ns, server, desiredSize) {
    const expectedNewName = 'pserv-' + desiredSize + '-' + server.index;
    const desiredMemory = Math.pow(2, desiredSize);

    if (!isDeleted(server)) {
        stopScripts(ns, server);
        if (!ns.deleteServer(server.name)) {
            ns.print("Failed to delete server: " + server.name);
            return false;
        }
    }
    server.deleted = true;

    const newName = ns.purchaseServer(expectedNewName, desiredMemory);
    if ( newName === "") {
        ns.print("Failed to create new server for: " + server.name);
        return false;
    }

    if ( !SERVER_NAME_PATTERN_WITH_SIZE.test(newName)) {
        ns.print("New name for server did not match patter: " + newName);
        throw("New name for server did not match pattern: " + newName);
    }

    ns.print("Upgraded server: [" + server.name + "/" + server.size + "] -> [" + newName + "/" + desiredSize + "]");

    server.name = newName;
    server.size = desiredSize;
    server.memory_total = desiredMemory;
    server.deleted = false;

    return true;
}

export async function main(ns) {
    const desiredSize = ns.args[0];

    if (!desiredSize) {
        ns.tprint("Usage: upgrade-servers.ns [desired size] ?block?")
        return;
    }

    if (desiredSize < 1 || desiredSize > 20) {
        ns.tprint("The value of [desired size] must be from 1 to 20, inclusive")
        return;
    }

    const desiredMemory = Math.pow(2, desiredSize);
    const serverPurchaseCost = ns.getPurchasedServerCost(desiredMemory);
    const userMoney = ns.getServerMoneyAvailable("home");

    ns.print("Upgrading servers to size " + desiredSize + " (" + desiredMemory.toLocaleString());
    var servers = getServersInfo(ns);
    do {
        const startingServerCount = servers.length;
        servers = upgradeServers(ns, servers, desiredSize, userMoney, serverPurchaseCost);

        if (startingServerCount > servers.length) {
            // If any servers were upgraded, signal
            signal(ns);
        }

        await ns.sleep(6 * 1000);
    } while (servers.length > 0);

    ns.print("Done");
}

