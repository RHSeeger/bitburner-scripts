/*
 * Commits crimes if not doing anything else
 */

const CRIMES_TO_DO = [
    "shoplift",
    "rob store",
    "mug",
    "larceny",
    "deal drugs",
    "bond forgery",
    "traffick arms",
    "homicide",
    "grand theft auto",
    "kidnap",
    "assassinate",
    "heist"
];

export async function main(ns) {
    ns.tail(); // It's active, and this gives us a way to kill it off if it becomes a problem

    let stillCriming = true;

    while (stillCriming) {
        if (!ns.isBusy()) {
            const bestCrime = CRIMES_TO_DO.sort((a, b) => {
                const statsA = ns.getCrimeStats(a);
                const statsB = ns.getCrimeStats(b);
                return (ns.getCrimeChance(b) * statsB.money / statsB.time) - (ns.getCrimeChance(a) * statsA.money / statsA.time)
            })[0];

            const crimeStats = ns.getCrimeStats(bestCrime);

            ns.print("Best crime: " + bestCrime + " at " + crimeStats.time + "s for " + ns.nFormat(crimeStats.money, "$0.000a") );

            const timeToComplete = ns.commitCrime(bestCrime);
            await ns.sleep(10);

            let player = ns.getPlayer();
            const expectedWorkType = player.workType;
            const expectedCrimeType = player.crimeType;

            await ns.sleep(crimeStats.time * 4 / 5);

            player = ns.getPlayer();
            stillCriming = player.isWorking === true
                && player.workType === expectedWorkType
                && player.crimeType === expectedCrimeType;

            ns.print("Still Criming? " + stillCriming);
        }

        await ns.sleep(1000);
    }
}

/*
 So sleep for like 75% of the duratino of the crime first
 when you wake up from that check if you're still busy
 If you are then the human player didn't cancel and you should do it again.
 If you did cancel then quit.

 Will need to check (at the 75% mark) to see if the player is still doing the crime that was scheduled
 Since the user could have canceled the crime and started some other busy work
 Can use getPlayer for that.


 */